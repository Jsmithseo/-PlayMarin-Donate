{"ast":null,"code":"var _jsxFileName = \"/Users/jeremysmith/Development/Playmarin-Donate/components/CheckoutForm.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Axios from \"axios\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({\n  price,\n  onSuccessfulCheckout\n}) => {\n  const {\n    0: isProcessing,\n    1: setProcessingTo\n  } = useState(false);\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement(\"card\");\n\n    try {\n      const {\n        data: clientSecret\n      } = await stripe.paymentIntents.create({\n        amount: price * 100,\n        currency: \"USD\",\n        payment_method: id,\n        confirm: true\n      });\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const {\n        error\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err);\n    }\n  }; // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"16px\",\n      iconColor: \"#efefe\",\n      \"::placeholder\": {\n        color: \"#000\"\n      }\n    },\n    invalid: {\n      iconColor: \"red\",\n      color: \"red\"\n    },\n    complete: {\n      iconColor: \"green\"\n    }\n  };\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return __jsx(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }))), checkoutError && __jsx(CheckoutError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, checkoutError), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, __jsx(SubmitButton, {\n    disabled: isProcessing || !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, isProcessing ? \"Processing...\" : `Pay $${price}`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/jeremysmith/Development/Playmarin-Donate/components/CheckoutForm.jsx"],"names":["useState","CardElement","useStripe","useElements","styled","Axios","Row","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","data","clientSecret","paymentIntents","create","amount","currency","payment_method","id","confirm","paymentMethodReq","createPaymentMethod","type","card","billing_details","confirmCardPayment","paymentMethod","err","iframeStyles","base","fontSize","iconColor","color","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport Axios from \"axios\";\n\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    setProcessingTo(true);\n\n    const cardElement = elements.getElement(\"card\");\n\n    try {\n\n        const { data: clientSecret } = await stripe.paymentIntents.create({\n  amount: price * 100,\n  currency: \"USD\",\n  payment_method: id,\n  confirm: true,\n});\n\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err);\n    }\n  };\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"16px\",\n      iconColor: \"#efefe\",\n      \"::placeholder\": {\n        color: \"#000\"\n      }\n    },\n    invalid: {\n      iconColor: \"red\",\n      color: \"red\"\n    },\n    complete: {\n      iconColor: \"green\"\n    }\n  };\n\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <Row>\n        <BillingDetailsFields />\n      </Row>\n      <Row>\n        <CardElementContainer>\n          <CardElement\n            options={cardElementOpts}\n            onChange={handleCardDetailsChange}\n          />\n        </CardElementContainer>\n      </Row>\n      {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n      <Row>\n        {/* TIP always disable your submit button while processing payments */}\n        <SubmitButton disabled={isProcessing || !stripe}>\n          {isProcessing ? \"Processing...\" : `Pay $${price}`}\n        </SubmitButton>\n      </Row>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}