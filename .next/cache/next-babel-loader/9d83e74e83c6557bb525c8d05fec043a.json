{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jeremysmith/Development/Playmarin-Donate/components/CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 40px;\\n  display: flex;\\n  align-items: center;\\n\\n  & .StripeElement {\\n    width: 100%;\\n    padding: 15px;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nvar CardElementContainer = styled.div(_templateObject());\n_c = CardElementContainer;\n\nvar CheckoutForm = function CheckoutForm(_ref) {\n  _s();\n\n  var price = _ref.price,\n      onSuccessfulCheckout = _ref.onSuccessfulCheckout;\n\n  var _useState = useState(false),\n      isProcessing = _useState[0],\n      setProcessingTo = _useState[1];\n\n  var _useState2 = useState(),\n      checkoutError = _useState2[0],\n      setCheckoutError = _useState2[1];\n\n  var stripe = useStripe();\n  var elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  var handleCardDetailsChange = function handleCardDetailsChange(ev) {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  var handleFormSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ev) {\n      var billingDetails, cardElement, _yield$axios$post, clientSecret, paymentMethodReq, confirmCardPayment;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ev.preventDefault();\n              billingDetails = {\n                name: ev.target.name.value,\n                email: ev.target.email.value,\n                address: {\n                  city: ev.target.city.value,\n                  line1: ev.target.address.value,\n                  state: ev.target.state.value,\n                  postal_code: ev.target.zip.value\n                }\n              };\n              setProcessingTo(true);\n              cardElement = elements.getElement(CardElement);\n              _context.prev = 4;\n              _context.next = 7;\n              return axios.post('/api/payment_intents', {\n                amount: price * 100\n              });\n\n            case 7:\n              _yield$axios$post = _context.sent;\n              clientSecret = _yield$axios$post.data;\n              console.log(clientSecret);\n              _context.next = 12;\n              return stripe.createPaymentMethod({\n                type: \"card\",\n                card: cardElement,\n                billing_details: billingDetails\n              });\n\n            case 12:\n              paymentMethodReq = _context.sent;\n\n              if (!paymentMethodReq.error) {\n                _context.next = 17;\n                break;\n              }\n\n              setCheckoutError(paymentMethodReq.error.message);\n              setProcessingTo(false);\n              return _context.abrupt(\"return\");\n\n            case 17:\n              _context.next = 19;\n              return stripe.confirmCardPayment(clientSecret, {\n                payment_method: paymentMethodReq.paymentMethod.id\n              });\n\n            case 19:\n              confirmCardPayment = _context.sent;\n              console.log(confirmCardPayment);\n\n              if (!error) {\n                _context.next = 25;\n                break;\n              }\n\n              setCheckoutError(error.message);\n              setProcessingTo(false);\n              return _context.abrupt(\"return\");\n\n            case 25:\n              onSuccessfulCheckout();\n              _context.next = 31;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](4);\n              setCheckoutError(_context.t0);\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 28]]);\n    }));\n\n    return function handleFormSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  var iframeStyles = {\n    base: {\n      fontSize: \"16px\",\n      iconColor: \"#efefe\",\n      \"::placeholder\": {\n        color: \"#000\"\n      }\n    },\n    invalid: {\n      iconColor: \"red\",\n      color: \"red\"\n    },\n    complete: {\n      iconColor: \"green\"\n    }\n  };\n  var cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return __jsx(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, __jsx(BillingDetailsFields, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, __jsx(CardElementContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }))), checkoutError && __jsx(CheckoutError, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, checkoutError), __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, __jsx(SubmitButton, {\n    disabled: isProcessing || !stripe,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, isProcessing ? \"Processing...\" : \"Pay $\".concat(price))));\n};\n\n_s(CheckoutForm, \"2xw3RUxwBWLOQjltidPO4c7nnLg=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c2 = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardElementContainer\");\n$RefreshReg$(_c2, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/jeremysmith/Development/Playmarin-Donate/components/CheckoutForm.jsx"],"names":["useState","CardElement","useStripe","useElements","styled","axios","Row","BillingDetailsFields","SubmitButton","CheckoutError","CardElementContainer","div","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","post","amount","clientSecret","data","console","log","createPaymentMethod","type","card","billing_details","paymentMethodReq","confirmCardPayment","payment_method","paymentMethod","id","iframeStyles","base","fontSize","iconColor","color","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\n\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n\nconst CardElementContainer = styled.div`\n  height: 40px;\n  display: flex;\n  align-items: center;\n\n  & .StripeElement {\n    width: 100%;\n    padding: 15px;\n  }\n`;\n\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n\n    setProcessingTo(true);\n\n    const cardElement = elements.getElement(CardElement);\n\n    try {\n      const { data: clientSecret } = await axios.post(\n        '/api/payment_intents', {\n        amount: price * 100\n      });\n\n      console.log(clientSecret)\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n\n      const confirmCardPayment = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n\n      console.log(confirmCardPayment)\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err);\n    }\n  };\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      fontSize: \"16px\",\n      iconColor: \"#efefe\",\n      \"::placeholder\": {\n        color: \"#000\"\n      }\n    },\n    invalid: {\n      iconColor: \"red\",\n      color: \"red\"\n    },\n    complete: {\n      iconColor: \"green\"\n    }\n  };\n\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <Row>\n        <BillingDetailsFields />\n      </Row>\n      <Row>\n        <CardElementContainer>\n          <CardElement\n            options={cardElementOpts}\n            onChange={handleCardDetailsChange}\n          />\n        </CardElementContainer>\n      </Row>\n      {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n      <Row>\n        {/* TIP always disable your submit button while processing payments */}\n        <SubmitButton disabled={isProcessing || !stripe}>\n          {isProcessing ? \"Processing...\" : `Pay $${price}`}\n        </SubmitButton>\n      </Row>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}